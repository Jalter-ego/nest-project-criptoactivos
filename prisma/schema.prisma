// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionType {
  BUY
  SELL
}

model User {
  id         String       @id @default(cuid())
  email      String       @unique
  name       String?
  password   String?
  portafolio Portafolio[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Portafolio {
  id           String        @id @default(cuid())
  name         String
  cash         Float         @default(10000.00)

  userId       String
  user         User     @relation(fields: [userId], references: [id])
  
  transactions Transaction[]
  holdings     Holding[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// NUEVO MODELO: Para registrar cu√°nto de cada activo posee el portafolio
model Holding {
  id           String @id @default(cuid())
  quantity     Float  // Cantidad total del activo que se posee

  portafolioId String
  portafolio   Portafolio @relation(fields: [portafolioId], references: [id])
  
  activeSymbol String
  active       Active @relation(fields: [activeSymbol], references: [symbol])

  @@unique([portafolioId, activeSymbol]) // Un portafolio solo puede tener una tenencia por activo
}


model Transaction {
  id          String  @id @default(cuid())
  type        TransactionType
  amount      Float
  price       Float

  activeSymbol String
  active       Active          @relation(fields: [activeSymbol], references: [symbol])

  portafolioId String
  portafolio   Portafolio @relation(fields: [portafolioId], references: [id])
  createdAt    DateTime   @default(now())
}

model Active {
  symbol     String @id @unique
  name       String
  price      Float

  transactions Transaction[]
  holdings     Holding[]
}
